<h2 align="Center">再次推导三维图形学中的透视投影公式</h1>
<p align="Center"><font face="华文行楷" size="6">刘文庆整理</font></p>

​        翻看以前的文章，看到几年前为一个学生写的透视投影变换，有一点陌生的感觉，那一年的投影公式推导，在归一化时先进行的x和y方向的归一化，然后通过另一篇文章修正进行了z方向的归一化修正，这一点与实际情况有出入；另外，在归一化过程中定义了$l$和$r$变量，这两个变量在实际使用时，$l$变量容易与1混淆。基于以上两点决定重新推导透视投影公式。

​        OpenGL中通过两个函数设置透视投影变换：

```
Void glFrustum( float left,float right,float bottom,float top,
float near,float far );
   void gluPerspective( GLdouble fovy,GLdouble aspect,
                   GLdouble zNear, GLdouble zFar );
```

函数解释：

1、 透视投影变换过程是在视坐标系(观察坐标系)中进行的。

透视投影变换的目的是将物体的视坐标变换为投影平面中的坐标，并且坐标范围统一限定在[-1,1]之间。为方便计算投影后的z坐标同样限制在[-1,1]之间。其图示如下：

![image-20250105213053383](../images/image-20250105213053383.png)

通过图示这两个函数的参数就很清楚了，这里仅仅解释两个参数：

Fovy：y方向(垂直方向)上的观察张开角度(以度为单位)。

Aspect：纵横比是 **x** (宽度) 与 **y** (高度) 的比率。该参数决定水平方向上观察张开角度。

### 一、 投影公式推导过程

首先我们以Void glFrustum( float left,float right,float bottom,float top,float near,float far );函数为依据，利用函数参数，推导投影公式：

##### 1.1 在$xoz$平面中，物体的视坐标$P(x,z)$，

![image-20250105213350824](../images/image-20250105213350824.png)

从图中平行线相似变换可以计算出$P'$点坐标：

​                                                             $$x^{\prime}=\frac{-N}{z} x$$

同理可以推导出P点在yoz平面的投影坐标
$$
y^{\prime}=\frac{-N}{z} y
$$
这样我们就可以写出$P'$点的视坐标$\left(\frac{-N}{z} x, \frac{-N}{z} y,-N\right)$,其中$-N$为近投影面距离观察点的坐标。

##### 1.2 归一化

​         由于$P'$位于剪切平面上，其$z$坐标统一为$-N$。这样保留$z$坐标已经没有实际意义了。我们前面谈到我们进行透视投影的目的是使得变换后的坐标落在[-1,1] 之间，我们希望点坐标可以写为$\left(\frac{-N}{z} x, \frac{-N}{z} y, z^{\prime}\right)$，其中 $z'$在[-1,1] 之间,观察$P'$的$\frac{-N}{z} x, \frac{-N}{z} y$坐标，其中均有$\frac{1}{-z}$分量，所以我们希望得到$z'$坐标同样含有$\frac{1}{-z}$分量。而 $z'$坐标的计算只与P点在观察窗口的深度有关，即z=Near时 $z^{\prime}=-1, z=$ Far时z' = 1。
   如果我们的$z{\rm{'}} = \frac{{(kz + b)}}{{ - z}}$，这样将$z=Near$和$z=Far$，带入公式，就可以求出$k$和$b$:

​                          $k=\frac{{(N+F)}}{{(N-F)}}$       $b=\frac{{(-2NF)}}{{(N-F)}}$

​    将$k$和$b$带入z'公式，得到如下的z'公式：

​         $z{\rm{'}} = \frac{{\frac{{N + F}}{{N - F}}z{\rm{ + }}\frac{{ - 2NF}}{{N - F}}}}{{ - z}}$这样z'就落在[-1,1] 之间，其它范围的坐标不在显示范围内。

​       上面我们对$z$方向的坐标进行了归一化，现在我们对$x$和$y$方面的坐标进行归一化。

​      上面推导出$x{\rm{'}} = \frac{{ - N}}{z}x$,当$x{\rm{'}}$等于Left时，我们希望计算结果为-1

​                                             当$x{\rm{'}}$等于Left时，我们希望计算结果为1

​      这样根据线性变换原理，我们可得到归一化的计算公式：

​              $$X{\rm{''}} = \frac{{2x{\rm{'}} - (R + L)}}{{R - L}} = \frac{{2\frac{{ - N}}{z}x - (R + L)}}{{R - L}}$$

​      同理我们可以计算出了投影后的坐标公式：

​              $\left(\begin{array}{l}X^{\prime \prime} \\ Y^{\prime \prime} \\ X^{\prime \prime}\end{array}\right)=\left(\begin{array}{l}\frac{2 \frac{-N}{Z} x-(R+L)}{R-L} \\ \frac{2 \frac{-N}{Z} y-(T+B)}{T-B} \\ \frac{\frac{N+F}{N-F} z+\frac{-2 N F}{N-F}}{-Z}\end{array}\right)$

####     **1.3** 写成齐次坐标形式：

​                $\left(\begin{array}{c}x^{\prime \prime} \\ y^{\prime \prime} \\ z^{\prime \prime} \\ 1\end{array}\right)=\left(\begin{array}{c}\frac{2 \frac{-N}{Z} x-(R+L)}{R-L} \\ \frac{2 \frac{-N}{Z} y-(T+B)}{T-B} \\ \frac{\frac{N+F}{N-F} z+\frac{-2 N F}{N-F}}{-Z} \\ 1\end{array}\right)$

​        在投影公式中，其齐次坐标的第四个分量，为了保存P点深度值，用于以后确定物体在屏幕上消隐计算，所以，我们写成：

####      **1.4** 整理变换公式，得到投影变换矩阵

​       提取公式中的$\left(\begin{array}{c}x \\ y \\ z \\ 1\end{array}\right)$ 分量得到矩阵形式的计算公式：

​      $\left(\begin{array}{c}x^{\prime \prime} \\ y^{\prime \prime} \\ z^{\prime \prime} \\ -Z\end{array}\right)=\left(\begin{array}{cccc}\frac{2 N}{R-L} & 0 & \frac{(T+B)}{T-B} & 0 \\ 0 & \frac{2 N}{T-B} & \frac{(T+B)}{T-B} & 0 \\ 0 & 0 & \frac{N+F}{N-F} & \frac{-2 N F}{N-F} \\ 0 & 0 & -1 & 0\end{array}\right)\left(\begin{array}{l}x \\ y \\ z \\ 1\end{array}\right)$

​       这就是我们在程序中使用的glFrustum函数内部的计算过程，可以看出变换矩阵中第四行不是（0，0，0，0），而是（0，0，-1，0）。这样透视变换不是正交变换，也不是仿射变换，是非线性变换过程。 

####       二、由glFrustum函数，推导出gluPerspective函数参数使用的计算公式。

​        glFrustum函数使用的是Left，Right，Top和Bottom四个参数限定剪切平面的坐标，而gluPerspective函数使用的是yoz平面上的观察者眼睛张开的角度fovy，以及剪切平面的长宽比Aspect。

​        我们可以根据这两个参数，计算出Left，Right，Top和Bottom，然后代入计算公式，就得到了**gluPerspective**函数使用的变换矩阵。

​       ![image-20250106090608300](../images/image-20250106090608300.png)  

​     从上图可以看出：

$Aspect=\frac{\text { Right－Left }}{\text { Top－Bottom }}$, ~一 般情况下，剪切平面是对称平面，再这种条件下，$Aspect =\frac{R i g h t}{Top}$ 。
而

$$
\begin{aligned}

& \text { Top }=N * \tan (\alpha / 2) \\

& \text { Bottom }=-\operatorname{Top}=-N * \tan (\alpha / 2) \\

& \text { Right }=\mu^* N * \tan (\alpha / 2) \\

& \text { Left }=- \text { Right }=-\mu^* N * \tan \left({ }^\alpha / 2\right)

\end{aligned}
$$
代入矩阵变换公式，得到变换矩阵：

$\left(\begin{array}{c}x^{\prime \prime} \\ y^{\prime \prime} \\ z^{\prime \prime} \\ -Z\end{array}\right)=\left(\begin{array}{cccc}\frac{1}{\text { Aspec } * \tan \frac{\alpha}{2}} & 0 & 0 & 0 \\ 0 & \frac{1}{\tan \frac{\alpha}{2}} & 0 & 0 \\ 0 & 0 & \frac{N+F}{N-F} & \frac{-2 N F}{N-F} \\ 0 & 0 & -1 & 0\end{array}\right)\left(\begin{array}{c}x \\ y \\ z \\ 1\end{array}\right)$

### 三、Direct3D\******中图形变换与OpenGL的主要异同

​      1、我们知道Direct3D使用的是左手定则，而OpenGL使用的是右手定则。

​      2、另外D3D内部变换计算过程采用列-行计算方式进行矩阵计算，所以变换矩阵是OpenGL的转置矩阵，而三维坐标和齐次坐标应该为行坐标形式（x,y,z,1）。即其矩阵变换过程为：

​                       $\left(x^{\prime \prime}, y^{\prime \prime}, z^{\prime \prime}, 1\right)=(x, y, z, 1)\left(\begin{array}{llll}a 11 & a 12 & a 13 & a 14 \\ a 21 & a 22 & a 23 & a 24 \\ a 31 & a 32 & a 33 & a 34 \\ a 41 & a 42 & a 43 & a 44\end{array}\right)$

​       3、OpenGL的投影变化结果Z范围是[-1, 1]，D3D的投影变化结果Z范围是[0, 1]。在推导公式过程中应该注意。

Direct3D的投影公式推导过程这里就不进一步详细叙述了。

### 四、透视投影公式的主要应用场合

​       1、    理解透视投影公式对从事三维编程具有很好的促进作用。三维图形引擎无论是OpenGL还是Direct3D均提供了Shader编程接口，有的图形封装还对内部的投影变换矩阵进行了修改。所以从事三维图形编程过程中只有明白了图形学原理才能走的更远。

​       2、    三维图形学的另一个研究方向是三维重构，或称为双目视角技术。我们在上面讨论中可以看出透视投影变换过程是非线性的，即不可逆的变换过程，双目视角技术就是模仿人的双目对拍摄到的两张图像中的物体进行反方向定位。这里用到大量的透视投影相关知识。

​      3、    图形变形矫正。OpenCV提供了对图片进行拍摄矫正的相关函数支持，其实现方法就是利用透视投影变换的逆序过程，当然需要一些辅助的变量，我想如果你理解了透视投影变换，对学习OpenCV这样的图形处理包会有很大的帮助作用的。

小朋友，你看懂了么？